

Problem 1
(a) README.md is tracked and unmodified
(b) README.md is tracked, modified and unstaged, while fun_problem.txt is 
untracked.
(c) README.md and fun_problem.txt are both tracked and staged.
(d) README.md and fun_problem.txt are both committed with message "My opinion 
on markdown". README.md then has the line "Markdown is too easy" appended to
it, while fun_problem.txt has "So far, so good" appended to it, therefore 
they are both modified.
e) README.md is modified and staged, while fun_problem.txt is unmodified.
Since it has not been modified in any way, its contents remain as "So far, so 
good".
f) README.md's status is modified because "Fancy git move" is
 appended to it.

Problem 3
1. A list should be used since the numbered items' order on the menu 
matters. A list means that we can insert/remove and set menu items using 
functions.
2. A set would allow for keys that can point to each Star Wars movie without
regard for order. The Set also allows for adddition/removal along with 
"contains" to search items in the set.
3. A Map would be ideal for this scenario: ISBN numbers would work as keys that
 are associated with a specific book. Maps also allow add, remove, and get 
 functions, the last of which would be used to return the book that the ISBN
 maps to.
4. A Map can be used in this scenario along with a list. Each year would serve 
as a key that would map to a list of all the movies released in that year. 
5. A Map can be used along with a struct for this purpose. The key types in 
the map can be structs, and when the structs are called upon along with the 
corresponding episode/season number attributes, the value associated with that 
key will return a string for the requested episode. 

Problem 4
Returned output: 5,4,3,2,1.

This is the inputted linked list, reversed.

funcA allows one parameter, a pointer to the linked list "in". It then sets the input pointer (in) to a node* r, which goes through a while loop to eventually point to the tail of the linked list.

funcB continuously recurses until the end of the linked list. Once it does,
it goes back up from the end of the list to the start while it sets
each node's "next" equal to "in", which is the previous node. The final 
reversal then results in the first element having its next pointer set to "nullptr."
This ends the list as the "final" value is now set to null. Node r from funcA 
is the new head node (actually the final one) which is returned to point to the 
newly flipped linked list.

funcB essentially flips all pointers between nodes and reverses the individual nodes;
funcA simply switches the head and tail pointers.